一、流的分类
1.输入流和输出流：从内存的角度划分，如内存--->硬盘：输出流。
数据从服务器通过网络流向客户端：对于服务器来说使用输出流，对于客户端使用输入流。(针对虚拟链路)

2.字节流和字符流：字节流数据单元是8位的字节，字符流数据单元是16位的字符。

3.节点流和处理流：从/向一个特定IO设备读/写的流称为节点流，也称低级流。
对于一个已存在的流进行封装或连接，通过封装后的流进行数据读写称为处理流，也称高级流。

使用处理流的好处：只要使用了相同的处理流，程序就可以通过完全相同的输入输出代码来访问不同的数据源。


二、流的概念模型：
InputStream/Reader:所有输入流的抽象父类，前者是字节输入流，后者是字符输入流。
OutputStream/Writer:所有输出流的抽象父类。

1.InputStream/Reader方法：
a.int read():从输入流中读取单个字节/字符,返回所读取的数据；
b.int read(byte[] b/char []b):从输入流中最多读取b.length个字节/字符的数据，并将其存储在数组中，并返回实际读取的字节/字符数。
c.int read(byte[] b/char[] b,int off, int len):从输入流中最多读取len个字节/字符的数据，放入b中，从off位置开始返回实际读取的字节/字符数。

2.OutputStream/Writer方法：
a.void write(int c ); b.void write(byte[]/char[] buf);c. void write(byte[]/char[] buf, int off, int len);将指定字符/字节（数组）中的元素写入输出流中。

Writer 还提供了以下方法：
void write(String str):将str中包含的字符输出到指定输出流中。
void write(String str, int off, int len):将指定str中从off开始，长度为len的字符输出到输出流中。

字节流在输出完后不关闭流也能输出内容，但是字符流需要关闭流才能输出，或者使用flush()强制刷新输出，这是因为字符流使用了缓冲区。

三、处理流用法：
使用处理流包装节点流，程序通过处理流来执行输入/输出功能。

所有节点流都是直接以物理IO节点作为构造器参数，所有不以物流IO节点作为构造器参数的都是处理流。

四、输入输出流体系：
1.通常来说，字节流比字符流功能强大，因为计算机中所有的数据都是二进制的。但是如果使用字节流处理文本文件，需要将这些字节转换成字符。 所以通常：如果输入/输出的内容是文本内容，则应该考虑字符流，如果输入/输出的是二进制内容。则应该考虑字节流。


2.转换流：用于将字节流转换成字符流。InputStreamReader和OutputStreamReader。


3.推回输入流
PushbackInputStream 和PushbackReader，如下三个方法：
1.void unread(byte/char []c):将一个字节/字符数组内容推回到缓冲区，从而允许重复读取刚刚读取的内容。
2.void unread(byte[]/char []b, int off, int len):将一个字节/字符数组里从off开始，长度为len字节/字符的内容推回到缓冲区，从而允许重复读取。
3.void unread(int b):将一个字节/字符推回缓冲区里，从而允许重复读。
这两个推回输入流都有一个推回缓冲区，当推回输入流每次调用read()方法时，总是先从推回缓冲区读取数据，在完全读取了推回缓冲区中的内容并且还没装满read()所需数组时才会从原输入流中读取。

五、重定向标准输入输出
Java标准输入/输出是System.in/System.out。默认代表键盘和显示器。
System类提供了三个重定向标准输入/输出的方法：
1.static void setErr(PrintStream err):重定向“标准”错误输出流。
2.static void setIn(InputStream in):重定向“标准”输入流；
3.static void setOut(PrintStream out):重定向“标准”输出流。







